{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","file","setFile","data","setData","selectedRow","setSelectedRow","remark","setRemark","visible","setVisible","newData","i","length","current","obj","mobile","earning_id","earning","key","push","rowSelection","onChange","selectedRowKeys","rows","className","type","e","target","files","accept","onClick","preventDefault","reader","FileReader","rABS","readAsBinaryString","onload","result","readedData","XLSX","read","wsname","SheetNames","ws","Sheets","dataParse","utils","sheet_to_json","header","Given","newObj","toString","keys","split","slice","map","item","values","forEach","k","action","console","log","approve","danger","title","onOk","okText","onCancel","value","columns","dataIndex","dataSource","pagination","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b37fad52.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport XLSX from \"xlsx\";\nimport { Table, Button, Space, Input, Modal } from \"antd\";\n\nfunction App() {\n  const [file, setFile] = useState(\"\");\n  const [data, setData] = useState(\"\");\n  const [selectedRow, setSelectedRow] = useState([]);\n  const [remark, setRemark] = useState(\"\");\n  const [visible, setVisible] = useState(false);\n\n  const handleChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = (e) => {\n    e.preventDefault();\n\n    var reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    reader.onload = function (e) {\n      var data = e.target.result;\n      let readedData = XLSX.read(data, { type: rABS ? \"binary\" : \"array\" });\n      const wsname = readedData.SheetNames[0];\n      const ws = readedData.Sheets[wsname];\n\n      /* Convert array to json*/\n      const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n\n      let Given = [];\n      for (var i = 0; i < dataParse.length; i++) {\n        let newObj = [dataParse[i].toString()];\n        Given.push(newObj);\n      }\n      const keys = Given[0][0].split(\",\");\n\n      // then map over the rest of the sub arrays:\n      const result = Given.slice(1).map(function (item) {\n        // get values from current item\n        const values = item[0].split(\",\");\n        // create an object with key names and item values:\n        const obj = {};\n        keys.forEach(function (k, i) {\n          obj[k] = values[i];\n        });\n        return obj;\n      });\n\n      setData(result);\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  const columns = [\n    {\n      title: \"Mobile\",\n      dataIndex: \"mobile\",\n      key: \"mobile\",\n    },\n    {\n      title: \"Earning ID\",\n      dataIndex: \"earning_id\",\n      key: \"earning_id\",\n    },\n    {\n      title: \"Earning\",\n      dataIndex: \"earning\",\n      key: \"earning\",\n    },\n  ];\n  const newData = [];\n  for (var i = 0; i < data.length; i++) {\n    let current = data[i];\n    let obj = {};\n    obj.mobile = current.mobile;\n    obj.earning_id = current.earning_id;\n    obj.earning = current.earning;\n    obj.key = i;\n    newData.push(obj);\n  }\n  const rowSelection = {\n    onChange: (selectedRowKeys, rows) => {\n      setSelectedRow(rows);\n    },\n  };\n\n  const approve = (key) => {\n    const newData = [];\n    for (var i = 0; i < selectedRow.length; i++) {\n      selectedRow[i].action = \"approved\";\n      newData.push(selectedRow[i]);\n    }\n    console.log(\"Approving==>\", newData);\n    setSelectedRow([]);\n  };\n\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleOk = () => {\n    selectedRow[0].remark = remark;\n    selectedRow[0].action = \"reject\";\n    console.log(\"rejecting==>\", selectedRow);\n    setRemark(\"\");\n    setVisible(false);\n    setSelectedRow([]);\n  };\n  const handleCancel = () => {\n    setVisible(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Oye Rickshaw</h1>\n      <input type=\"file\" onChange={handleChange} accept=\".xlsx\" />\n      <Button type=\"primary\" onClick={handleUpload}>\n        Parse\n      </Button>\n      <br />\n      <Space>\n        {selectedRow.length > 0 && (\n          <Button type=\"primary\" onClick={() => approve(\"approve\")}>\n            Approve\n          </Button>\n        )}\n        {selectedRow.length === 1 && (\n          <>\n            <Button type=\"primary\" danger onClick={showModal}>\n              Reject\n            </Button>\n\n            <Modal\n              title=\"Basic Modal\"\n              visible={visible}\n              onOk={handleOk}\n              okText={\"Send\"}\n              onCancel={handleCancel}\n            >\n              <Input type=\"text\" onChange={(e) => setRemark(e.target.value)} />\n            </Modal>\n          </>\n        )}\n      </Space>\n      {newData.length > 0 && (\n        <Table\n          columns={columns}\n          dataSource={newData}\n          pagination={false}\n          rowSelection={{\n            type: \"checkbox\",\n            ...rowSelection,\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}